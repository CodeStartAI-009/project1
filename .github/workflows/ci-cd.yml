 name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: Varun@123
          MYSQL_DATABASE: weatherdb
        ports:
          - 3306:3306
        options: >-
          --health-cmd "mysqladmin ping --silent"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3

    steps:
      # 1️⃣ Checkout the repo
      - name: Checkout code
        uses: actions/checkout@v3

      # 2️⃣ Set up JDK for backend
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 17

      # 3️⃣ Build backend
      - name: Build Spring Boot backend
        working-directory: ./backend
        run: ./mvnw clean package -DskipTests

      # 4️⃣ Set up Node for frontend
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      # 5️⃣ Build frontend
      - name: Build React frontend
        working-directory: ./app-weather-react-main
        run: |
          npm install
          npm run build

      # 6️⃣ Build Docker images
      - name: Build Docker images
        run: docker-compose -f docker-compose.yml build

      # 7️⃣ Push Docker images (optional, for remote deployment)
      # - name: Log in to DockerHub
      #   uses: docker/login-action@v2
      #   with:
      #     username: ${{ secrets.DOCKER_USERNAME }}
      #     password: ${{ secrets.DOCKER_PASSWORD }}
      # - name: Push images
      #   run: docker-compose -f docker-compose.yml push

      # 8️⃣ Deploy using Docker Compose (optional, for remote server)
      # - name: Deploy to server
      #   run: ssh user@server "cd /path/to/project && docker-compose pull && docker-compose up -d --build"
